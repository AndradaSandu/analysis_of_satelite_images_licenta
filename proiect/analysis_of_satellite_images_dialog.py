# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AnalysisOfSatelliteImagesDialog
                                 A QGIS plugin
 ...
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
pip                              -------------------
        begin                : 2021-06-16
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Andrada Lorena Sandu
        email                : andrada.sandu28@yahoo.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets
import sys


import ee
from ee_plugin import Map



FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'analysis_of_satellite_images_dialog_base.ui'))
years = []
index = 0
newImageNDVI = []
originalImageNDVI = []
newImageNDWI = []
originalImagesNDWI = []
isNDVI = False
class AnalysisOfSatelliteImagesDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=None):


        """Constructor."""
        super(AnalysisOfSatelliteImagesDialog, self).__init__(parent)
        self.setupUi(self)


        self.Reset.clicked.connect(self.lineEdit.clear)
        self.Reset.clicked.connect(self.lineEdit_2.clear)
        self.Reset.clicked.connect(self.resetEvent)
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit_2.setCalendarPopup(True)
        self.cancel.clicked.connect(self.close)
        self.generatecolor.clicked.connect(self.generate_mapndvi)
        self.generatecolor_3.clicked.connect(self.generate_mapndwi)
        self.generatecolor.clicked.connect(self.addComboBox)
        self.generatecolor_3.clicked.connect(self.addComboBox)
        self.pushButton.clicked.connect(self.returnItem)



    def resetEvent(self):
        self.lineEdit.setEnabled(True)
        self.lineEdit_2.setEnabled(True)
        self.dateEdit.setEnabled(True)
        self.dateEdit_2.setEnabled(True)
        self.generatecolor.setEnabled(True)
        self.generatecolor_3.setEnabled(True)
        years.clear()
        newImageNDVI.clear()
        originalImageNDVI.clear()
        newImageNDWI.clear()
        originalImagesNDWI.clear()
        try:
            for j in range(0, 100):
                self.comboBox.removeItem(0)
                self.comboBox_2.removeItem(0)
        except:
           pass


    def addComboBox(self, i = 1,y= None):
        if y is None:
            y = {''}
        self.comboBox.setMaxVisibleItems(20)
        self.comboBox_2.setMaxVisibleItems(20)
        self.comboBox.insertItems(i, y)
        self.comboBox_2.insertItems(i, y)


#We take the data as int type data corresponding to the year, month and day and convert them into a string with the format YYYY-MM-DD


    def generate_date_format(self, Y, M, D):

        date = ""
        if(D < 10):
            if(M < 10) :
                date = str(Y) + "-0" +  str(M) + "-0" + str(D)
            else :
                date = str(Y) + "-" + str(M) + "-0" + str(D)
        else:
            if (M < 10):
                date = str(Y) + "-0" + str(M) + "-" + str(D)
            else:
                date = str(Y) + "-" + str(M) + "-" + str(D)
        return date

    def generate_mapndvi(self, secondTime = False):
        globals()['isNDVI'] = True
        name = 'NDVI image'

        lat = 0.0
        long = 0.0
        lat = float(self.lineEdit.value())
        long = float(self.lineEdit_2.value())

        from_Y= self.dateEdit.date().year()
        from_M =self.dateEdit.date().month()
        from_D = self.dateEdit.date().day()
        to_Y = self.dateEdit_2.date().year()
        to_M = self.dateEdit_2.date().month()
        to_D = self.dateEdit_2.date().day()


        i = 0

        while from_Y < to_Y:
            y = from_Y
            from_Y = from_Y + 1
            start_date = self.generate_date_format(y, from_M, from_D)
            end_date = self.generate_date_format(from_Y, to_M, to_D)

            if lat != 0 or long != 0:
                POI = ee.Geometry.Point([lat, long])
            else:
                POI = ee.Geometry.Point([23.65086, 46.83382])
            name = 'NDVI image' + str(y)
            if (secondTime):
                from_Y = to_Y
                to_Y = to_Y + 1
                name = 'NDVI second image' + str(y)

            collection = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA') \
                .filterBounds(POI) \
                .filterDate(start_date, end_date) \
                .sort('CLOUD_COVER') \


            try:
                dataset = collection.first()

                B4 = dataset.select('B4')
                B3 = dataset.select('B3')
                B8= dataset.select('B8')
                B5= dataset.select('B5')
                B5= (B5.subtract(B4)).divide(B5.add(B4))
                ndvi = ee.Image.cat(B5, B4)

                if lat != 0.0 or long != 0.0:
                    Map.setCenter(lat, long, 6)
                else:
                    Map.setCenter(23.65086, 46.83382, 9)
                Map.addLayer(ndvi, {'bands': ['B5', 'B4'], 'min': 0.6, 'max': 1}, name)
                years.append(str(y))
                i = i + 1
                originalImageNDVI.append(dataset)
                newImageNDVI.append(ndvi)

            except:
                continue




        self.addComboBox( i, years)
        self.lineEdit.setEnabled(False)
        self.lineEdit_2.setEnabled(False)
        self.dateEdit.setEnabled(False)
        self.dateEdit_2.setEnabled(False)
        self.generatecolor_3.setEnabled(False)

    def generate_mapndwi(self, secondTime=False):
        globals()['isNDVI'] = False
        lat = 0.0
        long = 0.0
        lat = float(self.lineEdit.value())
        long = float(self.lineEdit_2.value())

        from_Y = self.dateEdit.date().year()
        from_M = self.dateEdit.date().month()
        from_D = self.dateEdit.date().day()
        to_Y = self.dateEdit_2.date().year()
        to_M = self.dateEdit_2.date().month()
        to_D = self.dateEdit_2.date().day()

        i = 0
        while from_Y < to_Y:
            y = from_Y
            from_Y = from_Y + 1

            start_date = self.generate_date_format(y, from_M, from_D)
            end_date = self.generate_date_format(from_Y, to_M, to_D)

            if lat != 0 or long != 0:
                POI = ee.Geometry.Point([lat, long])
            else:
                POI = ee.Geometry.Point([29.15086, 44.92382])
            name  = 'NDWI image' + str(y)
            if (secondTime):
                from_Y = to_Y
                to_Y = to_Y + 1
                name = 'NDWI second image' +str(y)

            colection = ee.ImageCollection('COPERNICUS/S2_SR') \
                .filterBounds(POI) \
                .filterDate(start_date, end_date) \
                .sort('CLOUDY_PIXEL_PERCENTAGE')

            try :
                dataset = colection.first()


                B4 = dataset.select('B4')
                B3 = dataset.select('B3')
                B2= dataset.select('B2')
                B8 = dataset.select('B8')
                B3 = (B3.subtract(B8)).divide(B3.add(B8))
                ndwi = ee.Image.cat(B3)
                if lat != 0.0 or long != 0.0:
                    Map.setCenter(lat, long, 6)
                else:
                    Map.setCenter(29.15086, 44.92382, 9)

                # Mask the non-watery parts of the image, where NDWI < 0.4.
                ndwi_masked = ndwi.updateMask(ndwi.gte(0.3))
                image_rgb = dataset.visualize(**{'bands': ['B4', 'B3', 'B2'], 'max': 2000, 'opacity' : 0.4})
                ndwi_rgb = ndwi_masked.visualize(**{
                    'min': 0.5,
                    'max': 1,
                    'palette': ['FF0000', 'FF0000']
                })

                mosaic = ee.ImageCollection([image_rgb, ndwi_rgb]).mosaic()
                Map.addLayer(mosaic,{}, name)
                originalImagesNDWI.append(dataset)
                newImageNDWI.append(ndwi)
                years.append(str(y))
                i = i + 1
            except :
                continue




        self.addComboBox(i, years)
        self.lineEdit.setEnabled(False)
        self.lineEdit_2.setEnabled(False)
        self.dateEdit.setEnabled(False)
        self.dateEdit_2.setEnabled(False)
        self.generatecolor.setEnabled(False)

    def returnItem(self):
        first = self.comboBox.currentIndex() - 1
        second = self.comboBox_2.currentIndex() - 1
        firstYear = years[first]
        secondYear = years[second]
        if globals()['isNDVI'] == True:
            name = 'NDVI differences ' + firstYear + '-' + secondYear
            firstImage = newImageNDVI[first]
            firstImageOriginal = originalImageNDVI[first]
            secondImage = newImageNDVI[second]
            secondImageOriginal = originalImageNDVI[second]

            ndvi_added = firstImage.select('B5').updateMask(firstImage.select('B5').gte(0.2).And(secondImage.select('B5').lt(0.2)))
            ndvi_removed = secondImage.select('B5').updateMask(secondImage.select('B5').gte(0.2).And(secondImage.select('B5').lt(0.2)))

            image_rgb = firstImageOriginal.visualize(**{'bands': ['B4', 'B3', 'B2'], 'max': 0.25, 'opacity': 0.4})
            rgb = ndvi_added.visualize(**{
                'min': 0.5,
                'max': 1,
                'palette': ['FF0000', 'FF0000']
            })
            rgb1 = ndvi_removed.visualize(**{
                'min': 0.5,
                'max': 1,
                'palette': ['00FF00', '00AA00']
            })


        else:
            name = 'NDWI differences ' + firstYear + '-' + secondYear
            firstImage = newImageNDWI[first]
            firstImageOriginal = originalImagesNDWI[first]
            secondImage = newImageNDWI[second]
            secondImageOriginal = originalImagesNDWI[second]

            ndwi_added = firstImage.updateMask(firstImage.gte(0.3).And(secondImage.lt(0.3)))
            ndwi_removed = secondImage.updateMask(secondImage.gte(0.3).And(firstImage.lt(0.3)))

            image_rgb = firstImageOriginal.visualize(**{'bands': ['B4', 'B3', 'B2'], 'max': 2000, 'opacity': 0.4})
            rgb = ndwi_added.visualize(**{'min': 0.5, 'max': 1, 'palette': ['00FF00', '00AA00']})
            rgb1 = ndwi_removed.visualize(**{'min': 0.5, 'max': 1, 'palette': ['FF0000', 'FF0000']})

        mosaic = ee.ImageCollection([image_rgb, rgb, rgb1]).mosaic()
        Map.addLayer(mosaic, {}, name)
























